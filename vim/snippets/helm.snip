snippet deployment
alias dep
	apiVersion: apps/v1
	kind: Deployment
	metadata:
		name: ${1:some-controller}
		namespace: ${2:default}
	spec:
		replicas: 1
		selector:
			matchLabels:
				$3
		template:
			metadata:
				labels:
					${3:app: $1}
			spec:
				containers:
				- name: ${4:name}
					image: ${5:nginx}
					imagePullPolicy: Always
					resources:
						requests:
							cpu: 100m
							memory: 200Mi
					ports:
					- containerPort: 8080

snippet service
alias svc
	apiVersion: v1
	kind: Service
	metadata:
		name: ${1:frontend}
		namespace: ${2:default}
		labels:
			app: ${3:someApp}
			tier: ${4:frontend}
	spec:
		ports:
		- port: ${5:80}
		selector:
			app: $3
			tier: $4

snippet persistent-volume
alias pv
	apiVersion: v1
	kind: PersistentVolume
	metadata:
		name: ${1:name}
		labels:
			app: ${2:app}
			tier: ${3:tier}
	spec:
		capacity:
			storage: ${4:20Gi}
		accessModes:
			- ${5:ReadWriteMany}
		nfs:
			server: ${6:NameOrIP}
			path: ${7:"/share/path/on/server"}

snippet persistent-volume-claim
alias pvc
	apiVersion: v1
	kind: PersistentVolumeClaim
	metadata:
		name: ${1:name}
		labels:
			# insert any desired labels to identify your claim
			app: ${2:app}
			tier: ${3:tier}
	spec:
		${4:storageClassName: ${5:standard}}
		accessModes:
			- ${6:ReadWriteOnce}
		resources:
			requests:
				# The amount of the volume's storage to request
				storage: ${7:20Gi}

snippet ingress
alias ing
	apiVersion: extensions/v1beta1
	kind: Ingress
	metadata:
		name: ${1:name}
		namespace: ${2:default}
	spec:
		${5:tls:
		- secretName: ${4:$3.tls}
			hosts:
			- $3
		}rules:
		- host: ${3:host.tld}
			http:
				paths:
				- path: ${7:/}
					backend:
						serviceName: ${8:service}
						servicePort: ${9:portNumberOrName}

snippet namespace
alias ns
	apiVersion: v1
	kind: Namespace
	metadata:
		name: ${1:name}

snippet service-account
alias sa
	apiVersion: v1
	kind: ServiceAccount
	metadata:
		name: ${1:name}

snippet config-map
alias cfg cm
	apiVersion: v1
	kind: ConfigMap
	metadata:
		name: ${1:name}
	data:
		${2:key}: ${3:value}

snippet secret
alias sec
	apiVersion: v1
	kind: Secret
	metadata:
		name: ${1:secret-name}
	type: ${2:Opaque}
	data:
		${3:key}: ${4:value}

snippet environment-template
alias env
	- name: ${1:VAR_NAME}
		value: ${2:value}

snippet secret-ref
alias secref seckeyref
	valueFrom:
		secretKeyRef:
			name: ${1:secret-name}
			key: ${2:key-name}

snippet pod-volume-object
alias pvol
	- name: ${1:name}
		${2:source}:
			name:

snippet job
	apiVersion: batch/v1
	kind: Job
	metadata:
		name: ${1:jobname}
		labels:
			${2:sometag: somevalue}
	spec:
		template:
			metadata:
				name: $1
			spec:
				containers:
				- name: ${3:containerName}
					image: ${4: image}
					imagePullPolicy: Always
					command:
					- ${5:"override"
					- "--the"
					- "entrypoint"}
				restartPolicy: OnFailure

snippet cronjob
alias cron
	apiVersion: batch/v2alpha1
	kind: CronJob
	metadata:
		name: ${1:name}
	spec:
		schedule: "${2:*/1} * * * *"
		jobTemplate:
			spec:
				template:
					spec:
						containers:
						- name: $1
							image: ${3: image}
							args: ${4:
							- /bin/sh
							- -c
							- date; echo Hello from the Kubernetes cluster}
						restartPolicy: OnFailure

snippet cert-manager-certificate
alias cert
	apiVersion: certmanager.k8s.io/v1alpha1
	kind: Certificate
	metadata:
		name: ${1:name}
		namespace: ${2:namespace}
	spec:
		secretName: ${4:$3.tls}
		dnsNames:
		- ${3:some.domain.com}
		acme:
			config:
			- dns01:
					provider: ${4:prod}
				domains: [ $3 ]
		issuerRef:
			name: ${5:letsencrypt}
			kind: ClusterIssuer


snippet network-policy
alias netp nwp
	kind: NetworkPolicy
	apiVersion: extensions/v1beta1
	metadata:
		namespace: ${1:default}
		name: ${2:policyname}
		spec:
		${4:podSelector:
				matchLabels:
					${3:{}}
	}	ingress:
				- {}

snippet probes
alias probe
	livenessProbe: &probe
		initialDelaySeconds: ${1:10}
		httpGet:
			port: ${2:8080}
			path: ${3:/}
	readinessProbe: *probe $0

snippet sealedsecret
alias ss
	apiVersion: bitnami.com/v1alpha1
	kind: SealedSecret
	metadata:
		name: ${1}
		namespace: ${2}
	spec:
		encryptedData:
			${3}

snippet pod-disruption-budget
alias pdb
	apiVersion: policy/v1beta1
	kind: PodDisruptionBudget
	metadata:
		name: ${1}
		namespace: ${2}
	spec:
		minAvailable: ${3}
		maxUnavailable: ${4}
		selector:
			matchLabels:
				app: ${5}

snippet horizontal-pod-autoscaler
alias hpa
	apiVersion: autoscaling/v1
	kind: HorizontalPodAutoscaler
	metadata:
		name: ${1}
		namespace: ${2:default}
	spec:
		scaleTargetRef:
			apiVersion: ${3:extensions/v1beta1}
			kind: ${4:Deployment}
			name: ${5}
		minReplicas: ${6:1}
		maxReplicas: ${7:5}
		targetCPUUtilizationPercentage: ${8:50}

snippet mapping
	apiVersion: getambassador.io/v1
	kind:  Mapping
	metadata:
		name: ${1}
		namespace: ${2:default}
		labels:
			${3}
	spec:
		host: ${4}
		prefix: ${5:/}
		service: ${6}
