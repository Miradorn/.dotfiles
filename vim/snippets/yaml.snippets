snippet dep "deployment"
apiVersion: apps/v1
kind: Deployment
metadata:
	name: ${1:some-controller}
	namespace: ${2:default}
spec:
	replicas: 1
	selector:
		matchLabels:
			$3
	template:
		metadata:
			labels:
				${3:app: $1}
		spec:
			containers:
			- name: ${4:name}
				image: ${5:nginx}
				imagePullPolicy: Always
				resources:
					requests:
						cpu: 100m
						memory: 200Mi
				ports:
				- containerPort: 8080
endsnippet

snippet svc "service"
apiVersion: v1
kind: Service
metadata:
	name: ${1:frontend}
	namespace: ${2:default}
	labels:
		app: ${3:someApp}
		tier: ${4:frontend}
spec:
	ports:
	- port: ${5:80}
	selector:
		app: $3
		tier: $4
endsnippet


snippet pv "persistent-volume"
apiVersion: v1
kind: PersistentVolume
metadata:
	name: ${1:name}
	labels:
		app: ${2:app}
		tier: ${3:tier}
spec:
	capacity:
		storage: ${4:20Gi}
	accessModes:
		- ${5:ReadWriteMany}
	nfs:
		server: ${6:NameOrIP}
		path: ${7:"/share/path/on/server"}
endsnippet

snippet pvc "persistent-volume-claim"
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
	name: ${1:name}
	labels:
		# insert any desired labels to identify your claim
		app: ${2:app}
		tier: ${3:tier}
spec:
	${4:storageClassName: ${5:standard}}
	accessModes:
		- ${6:ReadWriteOnce}
	resources:
		requests:
			# The amount of the volume's storage to request
			storage: ${7:20Gi}
endsnippet

snippet ing "ingress"
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
	name: ${1:name}
	namespace: ${2:default}
spec:
	${5:tls:
	- secretName: ${4:$3.tls}
		hosts:
		- $3
	}rules:
	- host: ${3:host.tld}
		http:
			paths:
			- path: ${7:/}
				backend:
					serviceName: ${8:service}
					servicePort: ${9:portNumberOrName}
endsnippet

snippet ns "namespace"
apiVersion: v1
kind: Namespace
metadata:
	name: ${1:name}
endsnippet

snippet sa "service-account"
apiVersion: v1
kind: ServiceAccount
metadata:
	name: ${1:name}
	namespace: ${2:default}
endsnippet

snippet cm "config-map"
apiVersion: v1
kind: ConfigMap
metadata:
	name: ${1:name}
	namespace: ${2:default}
data:
	${3:key}: ${4:value}
endsnippet


snippet sec "secret"
apiVersion: v1
kind: Secret
metadata:
	name: ${1:name}
	namespace: ${2:default}
type: ${3:Opaque}
data:
	${4:key}: ${5:value}
endsnippet

snippet env "environment-template"
- name: ${1:VAR_NAME}
	value: ${2:value}
endsnippet

snippet secref "secret-ref"
valueFrom:
	secretKeyRef:
		name: ${1:secret-name}
		key: ${2:key-name}
endsnippet

snippet pvol "pod-volume-object"
- name: ${1:name}
	${2:source}:
		name:
endsnippet

snippet job
apiVersion: batch/v1
kind: Job
metadata:
	name: ${1:name}
	namespace: ${2:default}
	labels:
		${3:sometag: somevalue}
spec:
	template:
		metadata:
			name: $1
		spec:
			containers:
			- name: ${4:containerName}
				image: ${5: image}
				imagePullPolicy: Always
				command:
				- ${5:"override"
				- "--the"
				- "entrypoint"}
			restartPolicy: OnFailure
endsnippet

snippet cron "cronjob"
apiVersion: batch/v2alpha1
kind: CronJob
metadata:
	name: ${1:name}
	namespace: ${2:default}
spec:
	schedule: "${3:*/1} * * * *"
	jobTemplate:
		spec:
			template:
				spec:
					containers:
					- name: $1
						image: ${4: image}
						args: ${5:
						- /bin/sh
						- -c
						- date; echo Hello from the Kubernetes cluster}
					restartPolicy: OnFailure
endsnippet

snippet cert "cert-manager-certificate"
apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
	name: ${1:name}
	namespace: ${2:namespace}
spec:
	secretName: ${4:$3.tls}
	dnsNames:
	- ${3:some.domain.com}
	acme:
		config:
		- dns01:
				provider: ${4:prod}
			domains: [ $3 ]
	issuerRef:
		name: ${5:letsencrypt}
		kind: ClusterIssuer
endsnippet


snippet nwp "network-policy"
kind: NetworkPolicy
apiVersion: extensions/v1beta1
metadata:
	namespace: ${1:default}
	name: ${2:policyname}
	spec:
	${4:podSelector:
			matchLabels:
				${3:{}}
}	ingress:
			- {}
endsnippet

snippet probes
livenessProbe: &probe
	initialDelaySeconds: ${1:10}
	httpGet:
		port: ${2:8080}
		path: ${3:/}
readinessProbe: *probe $0
endsnippet

snippet ss "sealedsecret"
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
	name: ${1}
	namespace: ${2}
spec:
	encryptedData:
		${3}
endsnippet

snippet pdb "pod-disruption-budget"
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
	name: ${1}
	namespace: ${2}
spec:
	minAvailable: ${3}
	maxUnavailable: ${4}
	selector:
		matchLabels:
			app: ${5}
endsnippet

snippet hpa "horizontal-pod-autoscaler"
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
	name: ${1}
	namespace: ${2:default}
spec:
	scaleTargetRef:
		apiVersion: ${3:extensions/v1beta1}
		kind: ${4:Deployment}
		name: ${5}
	minReplicas: ${6:1}
	maxReplicas: ${7:5}
	targetCPUUtilizationPercentage: ${8:50}
endsnippet

snippet mapping
apiVersion: getambassador.io/v1
kind:  Mapping
metadata:
	name: ${1}
	namespace: ${2:default}
	labels:
		${3}
spec:
	host: ${4}
	prefix: ${5:/}
	service: ${6}
endsnippet
