return {
  -- {
  --   "iguanacucumber/magazine.nvim",
  --   name = "nvim-cmp", -- Otherwise highlighting gets messed up
  --   event = "InsertEnter",
  --   dependencies = {
  --     "hrsh7th/cmp-buffer",
  --     "hrsh7th/cmp-cmdline",
  --     "hrsh7th/cmp-nvim-lsp",
  --     "hrsh7th/cmp-path",
  --     "onsails/lspkind.nvim",
  --   },
  --   opts = function()
  --     local cmp = require("cmp")
  --
  --     return {
  --       window = {
  --         completion = cmp.config.window.bordered(),
  --         documentation = cmp.config.window.bordered(),
  --       },
  --       completion = {
  --         completeopt = "menu,menuone,noselect",
  --       },
  --       preselect = cmp.PreselectMode.None,
  --       mapping = cmp.mapping.preset.insert({
  --         ['<Tab>'] = cmp.mapping(function(fallback)
  --           if cmp.visible() then
  --             cmp.select_next_item()
  --           elseif vim.snippet.active({ direction = 1 }) then
  --             vim.snippet.jump(1)
  --           else
  --             fallback()
  --           end
  --         end, { "i", "s" }),
  --
  --         ["<S-Tab>"] = cmp.mapping(function(fallback)
  --           if cmp.visible() then
  --             cmp.select_prev_item()
  --           elseif vim.snippet.active({ direction = -1 }) then
  --             vim.snippet.jump(-1)
  --           else
  --             fallback()
  --           end
  --         end, { "i", "s" }),
  --
  --         ["<C-j>"] = function(fallback)
  --           if vim.snippet.active() then
  --             vim.snippet.jump(1)
  --           else
  --             fallback()
  --           end
  --         end,
  --         -- ["<C-y>"] = cmp.config.disable,
  --         -- ["<C-n>"] = cmp.mapping({
  --         --   c = function()
  --         --     if cmp.visible() then
  --         --       cmp.select_next_item({ behavior = cmp.SelectBehavior.Select })
  --         --     else
  --         --       vim.api.nvim_feedkeys(t("<Down>"), "n", true)
  --         --     end
  --         --   end,
  --         --   i = function(fallback)
  --         --     if cmp.visible() then
  --         --       cmp.select_next_item({ behavior = cmp.SelectBehavior.Select })
  --         --     else
  --         --       fallback()
  --         --     end
  --         --   end,
  --         -- }),
  --         -- ["<C-p>"] = cmp.mapping({
  --         --   c = function()
  --         --     if cmp.visible() then
  --         --       cmp.select_prev_item({ behavior = cmp.SelectBehavior.Select })
  --         --     else
  --         --       vim.api.nvim_feedkeys(t("<Up>"), "n", true)
  --         --     end
  --         --   end,
  --         --   i = function(fallback)
  --         --     if cmp.visible() then
  --         --       cmp.select_prev_item({ behavior = cmp.SelectBehavior.Select })
  --         --     else
  --         --       fallback()
  --         --     end
  --         --   end,
  --         -- }),
  --         ["<C-d>"] = cmp.mapping.scroll_docs(-4),
  --         ["<C-f>"] = cmp.mapping.scroll_docs(4),
  --         -- ["<CR>"] = cmp.mapping.confirm({ select = false }),
  --         ["<C-e>"] = cmp.mapping.close(),
  --         ["<CR>"] = cmp.mapping.confirm({ behavior = cmp.ConfirmBehavior.Insert, select = false }),
  --       }),
  --       sources = cmp.config.sources({
  --         { name = "nvim_lsp", priority = 10 },
  --         { name = 'render-markdown', priority = 5 },
  --         -- { name = "copilot",  priority = 2 },
  --         -- { name = "luasnip",  priority = 5 },
  --         {
  --           name = "buffer",
  --           priority = 3,
  --           option = {
  --             get_bufnrs = function()
  --               local bufs = {}
  --               for _, win in ipairs(vim.api.nvim_list_wins()) do
  --                 bufs[vim.api.nvim_win_get_buf(win)] = true
  --               end
  --               return vim.tbl_keys(bufs)
  --             end,
  --           },
  --         },
  --         { name = "path", priority = 1 },
  --         -- { name = "tmux" },
  --       }),
  --       formatting = {
  --         format = require("lspkind").cmp_format({
  --           maxwidth = 100,
  --           mode = "symbol_text",
  --           symbol_map = { Copilot = "ï„“", },
  --
  --           before = function(entry, vim_item)
  --             -- vim_item.kind = lspkind.presets.default[vim_item.kind] .. " " .. vim_item.kind
  --             vim_item.menu = ({
  --               -- luasnip = "[Snip]",
  --               buffer = "[Buf]",
  --               nvim_lsp = "[LSP]",
  --               tmux = "[tmux]",
  --               path = "[path]",
  --             })[entry.source.name] or entry.source.name
  --
  --             return vim_item
  --           end,
  --         }),
  --       },
  --       experimental = {
  --         -- ghost_text = {
  --         --   hl_group = "LspCodeLens",
  --         -- },
  --       },
  --     }
  --   end,
  --   config = function(plugin, opts)
  --     local cmp = require("cmp")
  --     cmp.setup(opts)
  --     -- `:` cmdline setup.
  --     cmp.setup.cmdline(":", {
  --       mapping = cmp.mapping.preset.cmdline(),
  --       sources = cmp.config.sources({
  --         { name = "path" },
  --       }, {
  --         { name = "cmdline" },
  --       }),
  --     })
  --   end,
  -- },
}
