# ----------------
# common
# ----------------
alias ls='lsd'
alias l='ls -al'
alias la='ls -l'
alias lt='ls --tree'
alias t=lt
alias cat=bat
alias ping=prettyping

krak () {
    dir="$(cd "$(dirname "$1")"; pwd -P)/$(basename "$1")"
    open gitkraken://repo/$dir
    }

# ----------------
# hugo
# ----------------

function blogpost() {
  hugo new posts/$(date -u +"%Y%m%d")-${1}
}

# ----------------
# tmux
# ----------------
alias tmux="tmux -2 -u"
alias ta="tmux attach -d -t"
alias tp='tmuxp load'
alias ta='tmux attach -t'
alias tad='tmux attach -d -t'
alias ts='tmux new-session -s'
alias tl='tmux list-sessions'
alias tksv='tmux kill-server'
alias tkss='tmux kill-session -t'

# ----------------
# vi
# ----------------
alias vi=nvim
alias vim=nvim

# ----------------
# git
# ----------------
alias gitsh="gitsh --git $(which hub)"
alias lg=lazygit

function fco() {
  local tags branches target
  branches=$(
    git --no-pager branch --all \
      --format="%(if)%(HEAD)%(then)%(else)%(if:equals=HEAD)%(refname:strip=3)%(then)%(else)%1B[0;34;1mbranch%09%1B[m%(refname:short)%(end)%(end)" \
    | sed '/^$/d') || return
  tags=$(
    git --no-pager tag | awk '{print "\x1b[35;1mtag\x1b[m\t" $1}') || return
  target=$(
    (echo "$branches"; echo "$tags") |
    fzf --no-hscroll --no-multi -n 2 \
        --ansi --preview="git --no-pager log -150 --pretty=format:%s '..{2}'") || return
  git checkout $(awk '{print $2}' <<<"$target" )
}

# ----------------
# docker
# ----------------
function dsel {
  docker container ls --all | fzf --header-lines=1 --query "${1}" --multi | awk '{ print $1 }'
}

alias drrmit='docker run --rm -it'

# localhost for lazy docker people
function dopen {
  # get and count all published port mappings
  published=$(docker container ls | fzf --header-lines=1 --query "${1}" | awk '{print $1}' | xargs docker container port)

  # choose published port; will autochoose if there's only one port; will exit if there are none
  port=$(echo "${published}" | fzf --exit-0 --select-1 | grep -oE '(\d+)$')

  [ -n "${port}" ] && open "http://localhost:${port}"
}

# docker shell
function dsh {
  ID=$(docker container ls | fzf --header-lines=1 --query "${1}" | awk '{print $1}')
  docker exec -it "${ID}" /bin/sh
}

# ----------------
# gcloud
# ----------------

alias g=gcloud
alias gcl="gcloud config list"
alias gcs="gcloud config set"
alias gccl="gcloud config configurations list"
alias gcca="gcloud config configurations activate"

# ----------------
# Kubernetes
# ----------------
# select pod and get its ID
function ksel {
  kubectl get pods --all-namespaces | fzf --header-lines=1 --query "${1}" | awk '{ print $2,"--namespace " $1 }'
}

# Run shell on pod which remians to be selected
function kpsh {
  keti $(ksel) -- sh
}

# Get logs off pod which remians to be selected
function kplog {
  kubectl logs -f $(ksel)
}

alias kctx=kubectx
alias kx=kubectx
alias kns=kubens

function krename {
  kubectl config rename-context $(kubectl config current-context) $1
}

# ----------------
# FluxCD
# ----------------

alias flux="fluxctl --k8s-fwd-ns flux"


# ----------------
# aws
# ----------------


alias awsv=aws-vault

function awsls {
  aws configure list-profiles | fzf
}

function export_aws_profile {
  export AWS_PROFILE=$(awsls)
}

function awsve {
  if [ -z "$AWS_PROFILE" ]
  then
    profile=$(awsls)
  else
    profile=$AWS_PROFILE
  fi

  aws-vault exec ${profile} -- "$@"
}

function awsvl {
  if [ -z "$AWS_PROFILE" ]
  then
    profile=$(awsls)
  else
    profile=$AWS_PROFILE
  fi

  aws-vault login ${profile}
}


# ----------------
# terraform
# ----------------

alias tf=terraform
alias tfp="terraform plan"
alias tfpo="terraform plan -out=plan.out"
alias tfop=tfpo
alias tfa="terraform apply"
alias tfap="terraform apply plan.out"
alias tfpp="tfop && tfap"
alias tg="terragrunt"

# ----------------
# kitty
# ----------------

alias kssh=kitty +kitten ssh
alias icat='kitty +kitten icat'
alias d="kitty +kitten diff"

# ----------------
# other
# ----------------
alias r=remotectl
alias wetter="curl wttr.in/hamburg"
alias drops=ds
alias ag="ag --hidden"
alias tower=gittower

alias pj='npx projen'
alias dig=dog

function cdk-diff() {
  if ! [ -d "cdk.out" ]; then
    echo "no 'cdk.out' dir fount. Go to your apps root dir and run 'cdk synth'."
    return
  fi
  stage=$(ls cdk.out | grep 'assembly-' | fzf)
  stack=$(ls cdk.out/$stage/*.template.json | sed -E "s|cdk\.out\/${stage}\/(.+)\.template\.json|\1|" | fzf)
  npx cdk diff -a cdk.out/${stage} $stack
}

function update {
  brew update && brew outdated && brew upgrade && brew cleanup
  brew upgrade --cask
  omz update
  asdf plugin-update --all
  gem update --system
  gem update neovim coderay pry awesome-print byebug pry-byebug rubocop haml_lint scss_lint
  pip3 install --upgrade pynvim Pygments tmuxp
  yarn global upgrade
  # gcloud components update --quiet
  tldr --update
}
